<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">
<mapper namespace="com.sds.foodfit.model.member.MemberDAO">

	<insert id="insert" parameterType="com.sds.foodfit.domain.Member">
		 insert into member (name, id, pwd, email, gender, age, height, weight, snsIdx, roleIdx)
		 values (#{name}, #{id}, #{pwd}, #{email}, #{gender}, #{age}, #{height}, #{weight}, #{sns.snsIdx}, #{role.roleIdx})
	</insert>
	
	<!-- 아이디 중복 확인 -->
    <select id="isIdExists" resultType="int" parameterType="String">
        SELECT COUNT(*) FROM member WHERE id = #{id}
    </select>
	
	<!--홈페이지 회원 경우 비밀번호가 존재하고, 비밀번호는 member 테이블에 존재하므로, join 을 해야한다 
	하지만 mybatis 객체 간 관계를 이용하면 association -->
	<resultMap  id="MemberMap" type="Member">
		<id 			column="memberIdx" 			property="memberIdx"/>
		<result 	column="name" 					property="name"/>
		<result 	column="id" 						property="id"/>
		<result 	column="pwd" 					property="pwd"/>
		<result 	column="email" 					property="email"/>
		<result 	column="gender" 				property="gender"/>
		<result 	column="age" 					property="age"/>
		<result 	column="height" 				property="height"/>
		<result 	column="weight" 				property="weight"/>
		
		<association column="snsIdx" property="sns" javaType="Sns" select="com.sds.foodfit.model.sns.SnsDAO.select"/>
		<association column="roleIdx" property="role" javaType="Role" select="com.sds.foodfit.model.role.RoleDAO.select"/>
		
	</resultMap>
	<!-- id를 이용한 회원조회 -->
	<select id="selectById" parameterType="String" resultMap="MemberMap">
		select memberIdx , name, id, pwd, email, gender, age, height, weight, snsIdx, roleIdx
		from member where id=#{id}
	</select>	
	
	<select id="selectByMemberIdx" resultType="Member">
    	select * from member WHERE memberIdx = #{memberIdx}
	</select>
	
	<!--회원정보수정-->
	<update id="update" parameterType="Member">
		update member 
		set name=#{name}, id=#{id}, pwd=#{pwd}, email=#{email}, gender=#{gender}, age=#{age},  height=#{height}, weight=#{weight}
		where memberIdx=#{memberIdx}
	</update>
	
	<!-- 아이디 변경 -->
    <update id="updateId" parameterType="java.util.Map">
        update member set id=#{id} where memberIdx=#{memberIdx}
    </update>
    
    <!-- 비밀번호 변경 -->
    <update id="updatePassword" parameterType="java.util.Map">
        update member set pwd=#{newPwd} where memberIdx=#{memberIdx} and pwd=#{currentPwd}
    </update>
    
    <!-- 회원 완전 삭제 -->
    <delete id="deleteMember" parameterType="int">
        delete from member where memberIdx = #{memberIdx}
    </delete>
    
      
</mapper>